	1. NUMA / Non-Uniform memeory access / 불균일 기억 장치 접근
	• 각 cpu는 자체적으로 여러개의 메모리를 가지고 있다. Cpu가 메모리를 연결하는 방식으로 다른 cpu그룹과 연결된 메모리에 액세스 한다. / 각 그룹 = NUMA노드 다
	• 각 cpu들은 각자 자신의 로컬메모리에 접근할 수 있다. 
	-> 로컬 메모리가 full인 경우 다른 cpu의 메모리(외부메모리)에 접근해야 되는 오버헤드 발생
	=> 로컬메모리에 많은 접근이 일어나면 성능 향상 
	• 멀티프로세스 환경에 적용 
	• 기존의 메모리 관리 아키텍쳐 = UMA : 모든 프로세서가 공용 버스를 이용해서 메모리에 접근 -> 한번에 하나의 프로세스만 cpu메모리에 접근 가능
	• 메모리에 접근하는 시간이 메모리와 프로세서간의 상대적인 위치에 따라 달라진다. 
	=> 로컬 메모리: 현재 실행중인 프로세스가 cpu와 같은 노드에 있는 메모리
	외부 메모리: 현재 실행 중인 노드에 속하지 않은 메모리 
	• 외무 메모리 액세스 비용 : 로컬 메모리 액세스 비용 = NUMA비율
	비율이 높을 수록 다른 노드의 메모리에 액세스하는데 더 많은 비용이 소요된다.
	• 로컬메모리 접근이 원격 메모리 접근시보다 빠르다.
	• 각각의 프로세서에 독립적인 별도의 메모리를 제공
	• 여러 프로세스가 동일 메모리 주소에 접근시 충돌 방지 
	• 리눅스 NUMA / numact| --show
	- Dafalt: 현재 프로세스가 실행되고 있는 노드에서 먼저 메모리 할당 받아 사용
	- Bind 정책: 특정 프로세스를 특정 노드에 바인딩하기 -> locality향상  / bind한 노드의 메모리 full이면 성능 급격히 저하
	- Preferred 정책: 가능하다면 설정한 노드로부터 메모리 할당 
	- Interleaved 정책: 다수의 노드에서 거의 동일한 비율로 메모리 할당 받는다. RR 사용! 
