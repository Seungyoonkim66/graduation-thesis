http://jake.dothome.co.kr/spinlock/

	1. spinlock: critical section 
	(CS)에 프로세스의 동시 접근 금지 수단 
	spinlock holder cpu는 CS에서 preemption이 일나지 않으면 스케줄링이 일어나지 않아 스레드 context swithcing이 일어나지 않는다. 
	-> 다른 스레드가 해당 CS에 접근할 수 없다.
	
	2. Non-preemption spinlock 
	spinning하는 동안 preemption을 방지하기 위해 CS 앞 뒤에 preempt_disable()과 preempt_enable()명령어로 보호 받도록 한다. (CS의 컨디션을 check하며 busy waiting)

	3. Lock Holder Preemption (LHP)
	"If a VCPU is preempted inside the guest kernel while holding a spinlock this lock stays acquired until the VCPU is executed again" 
	lock이 spinning하는 동안에는 preemption을 금지하지 않는다. 
	spinlock이 오랫동안 spin wait될 수 밖에 없을 떄에 preemption이 가능하게 하는 구조로 preemption latency를 줄일 수 있어 real time applicatoin에 효과적이다. 
	(VCPU 가 guest kernel에서 spinlock을 hold하고 있는 동안 선점당하면 hold 된 lock 해당 VCPU가 다시 실행될때까지 이 lock을 가지고 있기 때문에 그 사이에 다른 스레드가 lock을 가져갈 수 없다. 

<4월 7일 공부 정리 자료>
1. Spinlocks 
• 프로세스가 lock을 소유하는 것 = CS에 진입해 있는 것 
• Lowest level ME 메커니즘 in linux kernel
• Ketnel의 안정성과 성능에 많은 영향을 미친다. 
• Spinlock = int value 
1) Lock availability 나타내는 변수 
2) Spin_lock() ->값을 감소시킴 / 0 이면 lock obtained 
해당 변수가 1이면 CS를 사용중인 프로세스가 없다는 뜻이므로 CS 진입, 0 이면 loop을 돌며 CS 사용중인 프로세스가 사용이 종료되어 변수++를 실행할때까지 대기한다. 
Int S
Spin_lock(S) -> S --;
그 결과 S가 음수가 되면 S는 원래 0이었다는 사실을 알게 됨
그것은 CS를 사용중인 프로세스가 있음을 의미한다. Lock!
Lock을 걸면 spin / busy wait를 하게 된다. 
CS에 진입한 프로세스가 exit하면서 V(S)를 하여 S++ 를 해서 1, 즉
S가 양수로 바뀌면 loop을 멈추고 CS로 진입하게 된다. 
• 구현이 빠르다. 
• 단점: starvation 발생 가능 
       프로세서는 가장 오래 기다린 프로세스가 무엇인지 알지 못한다.
	Lock unfairness -> latency issue 
2. Spinlock의 단점을 보완하기 위해 등장한 Ticket spinlocks 
: ticket spinlock = next(다음 순번) + owner(현재 순번)
E = 0 으로 초기화
Spinlock() -> next의 E++;
If (next == owner) , lock 
Else , 기다리는 프로세스 spin 시작 ro wait unlock 
Owner++ 해서 S=1이 되면 unlock이 되었다는것!
- 프로세스 수 256개로 제한  -> 큰 시스템에서 유용하지 않아! 

<OS 수업 >
1) Spinlock : busy waiting을 방지하기 위해 asleep 상태로 만드는 것의 단점으로 인해 멀티cpu에서 busy waiting을 다시 하게 하는 방법
• P, V, 초기화 연산으로 접근 가능한 보호받는 정수형 변수 = semaphore
• Sleep queue가 없다. - sleep하지 않고 loop을 돌게 한다.



Active변수가 0 이면 loop을 계속 돌게 한다, 1이면 CS에 진입한다. 
• 특징 :
Busy waiting을 하게 한다.
Lock이 짧을 것이라고 예상될때 busy waiting을 하게 하는 것이 좋다.
길면 sleep시키는 것이 낫다. (코드 보고 개발자가 예측하는 것이 필요)
-> 대부분은 OS에 사용

2) Eventcount/sequencer = ticket lock
• Sequencer: 정수형 변수 / 자동으로 0 초기화 -ticket에 표시되는 수 / 계속해서 1씩 증가 / ticket()연산만 접근 가능
• Ticket(S): indivisible operation / 지금까지 ticket연산이 호출된 횟수를 반환 
• Eventcount: 정수형 변수 / (창구 직원), 자동 0 초기화, 무제한 증가, read advance, await operation만 접근 가능
-read: 현재 값 반환 
-advance(E): E++, 현재 event를 기다리고 있던 프로세스 깨우기
-await (E, v): E<v이면 현재 실행 중인 프로세스 배치하기,


• ME  


No starvation!! 
• 특징: busy waiting을 방지한다, FIFO순서대로 wake 하여 starvation이 없다
비효율적일 수 있다.


3. MCS locks 
• MCS구조체 = pointer + 정수형 변수 (lock 소유가능 여부) 
• Spinlock : single bit lock = 0 -> lock is available
• CS진입을 원하는 프로세스는 spinning 
• -> ticket spinlock 등장 (fairness 도입)
• MCS locks:
struct mcs_spinlock {
	struct mcs_spinlock *next;
	int locked; /* 1 if lock acquired */
    };
Lock을 원하는 cpu -> spinlock 실행: next field 주소를 포인칭하는 atomic exchange operation을 한다. 
-> next pointer의 이전 값을 반환한다. 
만약 pointer가 null이면 cpu = locked 현재 프로세스가 사용중 
/ non-null이면 cpu lock unavail
• MCS lock 의 compare_and_swap함수
reg와 oldval이 같은지 확인하고, 만일 같다면 *reg를 newval로 갈아끼운다. 이 과정이 atomic하므로, old_reg_val에 *reg를 넣은 다음에 *reg 값이 변할 위험이 없다.
Cpu가 unlock을 하면 main lock에 대해 compare-and-swap 연산을 한다. Pointer가 null을 가리키게 한다. =
• Cache-line bouncing을 감소시킴
• Fair/ cpu 도착하는 순서대로 lock을 준다. 
• Main lock , lock을 소유하려는 cpu마다 main lock 과 같은 구조체 부여 각 cpu의 spinning은 각자의 구조체에서 이루어진다 -> no 경쟁
Main lock의 pointer는 항상 대기 큐의 tail을 가리킨다. 
• Lock을 얻고자 하는 / CS에 진입하려고 하면 lock구조체는 변수를 1 증가 시키고, 진입하려고하는 next cpu 주소를 가리킨다. = unconditional atomic exchange -> pointer의 이전 값을 반환한다. 
Pointer가 가리키는 주소값이 mull이면 집입을 시도한 cpu는 lock을 얻은 것 / 다음cpu가 lock을 소유하려고 하면 경쟁을 하지 않고 같은 방식으로 lock의 pointer가 해당 cpu의 주소값을 갖는다. 

4. Qspinlock 
• 4개의 Mscspinlock구조체가 배열을 갖는다. -> 
normal, software interrupt, hardware interrupt, and non-maskable interrupt lock을 하게 한다.
 cpu가 동시에 하나 이상의 spinlock을 얻기 위해 4개의 구조체가 있어야 한다
• Ticket spinlock= 32 bits word - 커널에 임베디드 되어있기 때분에 사이즈가 고정되어 있다. 만약 MCS lock이 커널에서 사용되면 사이즈 유연성이 필요하다.
• 32bit qspinlock 
- Int counter : locked field
- 2bit index : list의 tail에서 waiter에 사용되는 mscspinlock구조체의 배열의 입구를 가리킴 / spinning을 위해 각 cpu에 사용하는 변수 
- Single pending bit - busy waiting을 하고 있는 cpu가 하나라면 pending bit을 set하고, spinning을 하지 않으면서 기다린다. 그 다음 cpu가 대기하러 오면 이전처럼 busy waiting을 한다. 
- Int field - 큐의 tail을 가리키는 cpu의 수** lock을 소유하는 다음 순번인 경우 

